=> Client Credential Token Service <=

-> Frontends\MultiShop.WebUI\Services\Interfaces'da:
IClientCredentialTokenService interface'i oluşturulur.

-> Frontends\MultiShop.WebUI\Handlers'da:
ClientCredentialTokenHandler class'ı oluşturulur.
SendAsync() metodu yazılır.

-> Frontends\MultiShop.WebUI\Services'da CatalogServices folder'ı oluşturulur.
Frontends\MultiShop.WebUI\Services\CatalogServices'da CategoryServices folder'ı oluşturulur.
CategoryServices folder'ı içinde:
ICategoryService interface'i ile CategoryService class'ı oluşturulur. 
CategoryService'de metotlar yazılır.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Configuration yapılır.

builder.Services.AddHttpClient<ICategoryService, CategoryService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
});

-> Frontends\MultiShop.WebUI'a IdentityModel.AspNetCore paketi 3.0.0 version'u ile kurulur.

-> Frontends\MultiShop.WebUI\Services\Concrete'da ClientCredentialTokenService class'ı oluşturulur.
GetToken() metodu yazılır.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service registration işlemleri yapılır.

builder.Services.AddAccessTokenManagement();

builder.Services.AddScoped<ClientCredentialTokenHandler>();

builder.Services.AddHttpClient<IClientCredentialTokenService, ClientCredentialTokenService>();

builder.Services.AddHttpClient<ICategoryService, CategoryService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

-> Frontends\MultiShop.WebUI\Controllers\TestController'da:
Deneme2() metodu yazılır.

-> Frontends\MultiShop.WebUI\Views\Test'de:
Deneme2.cshtml sayfası oluşturulur.

-> Uygulama MultiShop.OcelotGateway - MultiShop.IdentityServer - MultiShop.Catalog - MultiShop.WebUI projeleri ile birlikte ayağa kaldırılır. Docker'ın da ayakta olması gerekir.
https://localhost:7277/test/deneme2 sayfasına gidilir ve kategorilerin listelendiği görülür.