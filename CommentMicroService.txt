=> Comment Micro Service <=

-> Services\Comment\MultiShop.Comment\appsettings.json'da identityserverurl eklenir.
"IdentityServerUrl": "http://localhost:5001",//5001 IdentityServer'ın ayağa kalktığı port numarasıdır. 

-> MultiShop.Comment'de Microsoft.AspNetCore.Authentication.JwtBearer paketi kurulur.

-> Services\Comment\MultiShop.Comment\Program.cs'de:
Authentication register edilir.

//JwtBearer token geçerliliğini kontrol eden pakettir.
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{
    //Authority JwtBearer'ı kiminle kullanıcağını belirtir. IdentityServerUrl appsettings.json'dan gelir.
    //Comment mikro servisi ayağa kalkarken IdentityServer mikro servisi de ayağa kalkar.
    options.Authority = builder.Configuration["IdentityServerUrl"];
    options.Audience = "ResourceComment";//Config tarafında dinleyici olan key ResourceComment ApiResource setlenir.
    options.RequireHttpsMetadata = false;//IdentityServerUrl http olduğu için false set edildi.
});

app.UseAuthentication();

-> Services\Comment\MultiShop.Comment\Controllers\CommentsController'da:
[Authorize] -> Login olma zorunluluğu eklenir.
CommentListByProductId metodunda Id paremetresi eklenir.
[HttpGet("CommentListByProductId/{id}")]

-> Frontends\MultiShop.WebUI\Services'de CommentServices folder'ı oluşturulur.
CommentServices folder'ı içinde:
ICommentService interface'i ile CommentService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\ViewComponents\ProductDetailViewComponents\_ProductDetailReviewComponentPartial'de:
Düzenleme yapılır.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Comment service register edilir.

builder.Services.AddHttpClient<ICommentService, CommentService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Comment.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

-> Uygulama ayağa kalkarken MultiShop.OcelotGateway - MultiShop.Catalog - MultiShop.IdentityServer - MultiShop.Comment ve MultiShop.WebUI projeleri birlikte ayağa kaldırılır.

-> Frontends\MultiShop.WebUI\Services\CatalogServices'de:
ContactServices folder'ı oluşturulur. ContactServices folder'ı içinde:
IContactService interface'i ile ContactService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Contact servisi register edilir.
builder.Services.AddHttpClient<IContactService, ContactService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

-> Uygulama ayağa kalkarken MultiShop.OcelotGateway - MultiShop.Catalog - MultiShop.IdentityServer - MultiShop.Comment ve MultiShop.WebUI projeleri birlikte ayağa kaldırılır.

https://localhost:7277/Contact/Index adresine gidilerek iletişim sayfası görüntülenir.

-> Postman'de gönderilen mesajların görüntülenmesi:
Uygulama ayakta iken:
POST http://localhost:5001/connect/token token ürelilir.
GET http://localhost:5000/services/catalog/contacts üretilen token ile get isteğinde bulunulur.

-> Frontends\MultiShop.WebUI\Views\Shared\Components\_NavbarUILayoutComponentPartial\Default.cshtml'de:
İletişim için link verilir.
<a href="/Contact/Index/" class="nav-item nav-link">İletişim</a>
