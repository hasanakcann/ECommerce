=> Admin Paneli Sayfa Dönüşümleri <=

-> Frontends\MultiShop.WebUIControllers'da:
LoginController refactor edildi.

-> Frontends\MultiShop.WebUI\Views\Login'de:
SignIn.cshtml sayfası silindi.

=> Category <=
-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
CategoryController refactor edildi.

=> Product <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de ProductServices folder'ı oluşturulur.
ProductServices folder'ı içinde:
IProductService interface'i ile ProductService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
ProductController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IProductService, ProductService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> Special Offer <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de SpecialOfferServices folder'ı oluşturulur.
SpecialOfferServices folder'ı içinde:
ISpecialOfferService interface'i ile SpecialOfferService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
SpecialOfferController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<ISpecialOfferService, SpecialOfferService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> Feature Slider <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de FeatureSliderServices folder'ı oluşturulur.
FeatureSliderServices folder'ı içinde:
IFeatureSliderService interface'i ile FeatureSliderService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
FeatureSliderController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IFeatureSliderService, FeatureSliderService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> Feature <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de FeatureServices folder'ı oluşturulur.
FeatureServices folder'ı içinde:
IFeatureService interface'i ile FeatureService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
FeatureController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IFeatureService, FeatureService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> Offer Discount <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de OfferDiscountServices folder'ı oluşturulur.
OfferDiscountServices folder'ı içinde:
IOfferDiscountService interface'i ile OfferDiscountService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
OfferDiscountController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IOfferDiscountService, OfferDiscountService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> Brand <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de BrandServices folder'ı oluşturulur.
BrandServices folder'ı içinde:
IBrandService interface'i ile BrandService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
BrandController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IBrandService, BrandService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();

=> About <=
-> Frontends\MultiShop.WebUI\Services\CatalogServices'de AboutServices folder'ı oluşturulur.
AboutServices folder'ı içinde:
IAboutService interface'i ile AboutService class'ı oluşturulur.

-> Frontends\MultiShop.WebUI\Areas\Admin\Controllers'da:
AboutController refactor edildi.

-> Frontends\MultiShop.WebUI\Program.cs'de:
Service register edildi.

builder.Services.AddHttpClient<IAboutService, AboutService>(options =>
{
    options.BaseAddress = new Uri($"{values.OcelotUrl}/{values.Catalog.Path}");
}).AddHttpMessageHandler<ClientCredentialTokenHandler>();